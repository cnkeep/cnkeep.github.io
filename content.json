[{"title":"Hello World","date":"2019-03-28T03:45:41.057Z","path":"2019/03/28/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"Keepalived安装与配置","date":"2018-12-29T03:25:33.000Z","path":"2018/12/29/01-Keepalived安装配置/","text":"Keepalived是一个免费的开源的交换机制软件，主要提供Load Balancing(负载均衡)和HA(高可用) 标签：Centos, Keepalived 1. 介绍Keepalived是一个免费的开源的交换机制软件，主要提供Load Balancing(负载均衡)和HA(高可用)我们一般采用Keepalived+Nginx分别来实现前端的高可用和负载均衡。它提供虚拟IP对外服务，可以自动完成主备的切换，服务可以在客户端无感知的情况下完成主备的切换，从而持续的为我们客户提供服务。 本次就来看看如何配置Keepalived 2. 安装与配置从官网下载最先版本，这里以keepalived-2.0.13为例。 2.1 安装123456# cd /usr/local# wget http://www.keepalived.org/software/keepalived-2.0.13.tar.gz# tar -zxvf keepalived-2.0.13.tar.gz# cd keepalived-2.0.13/# ./configure --prefix=/usr/local/keepalived# make &amp;&amp; make install 2.2 配置 将配置文件拷贝到系统对应的目录下1234# mkdir /etc/keepalived# cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf# cp /usr/local/keepalived-2.0.13/keepalived/etc/init.d/keepalived /etc/rc.d/init.d/keepalived# cp /usr/local/keepalived-2.0.13/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived 使用service keepalived start命令启动服务时，默认会将/etc/sysconfig/keepalived文件中KEEPALIVED_OPTIONS参数作为keepalived服务启动时的参数，并从/etc/keepalived/目录下加载keepalived.conf配置文件，或用-f参数指定配置文件的位置。 123456789101112131415[root@localhost local]# vi /etc/sysconfig/keepalived # Options for keepalived. See `keepalived --help&apos; output and keepalived(8) and# keepalived.conf(5) man pages for a list of all options. Here are the most# common ones :## --vrrp -P Only run with VRRP subsystem.# --check -C Only run with Health-checker subsystem.# --dont-release-vrrp -V Dont remove VRRP VIPs &amp; VROUTEs on daemon stop.# --dont-release-ipvs -I Dont remove IPVS topology on daemon stop.# --dump-conf -d Dump the configuration data.# --log-detail -D Detailed log messages.# --log-facility -S 0-7 Set local syslog facility (default=LOG_DAEMON)KEEPALIVED_OPTIONS=&quot;-D&quot; 设置keepalived开机启动123456# chkconfig keepalived on #设置开机自启# chkconfig keepalived off #取消开机自启# service keepalived start #启动服务# service keepalived stop #停止服务# ln -s /usr/local/keepalived/sbin/keepalived /usr/local/sbin/ #建立软连接方便操作 keepalived正常运行后，会启动3个进程，其中一个是父进程，负责监控其子进程。一个是vrrp子进程，另外一个是checkers子进程。12345[root@localhost local]# ps -ef|grep keepalivedroot 24726 1 0 21:54 ? 00:00:00 /usr/local/keepalived/sbin/keepalived -Droot 24727 24726 0 21:54 ? 00:00:00 /usr/local/keepalived/sbin/keepalived -Droot 24728 24726 0 21:54 ? 00:00:00 /usr/local/keepalived/sbin/keepalived -Droot 24873 6495 0 22:36 pts/1 00:00:00 grep --color=auto keepalived 到此keepalived就安装完成了。 3. keepalived.conf配置文件说明keepalived服务安装完成之后，后面的主要工作就是在keepalived.conf文件中配置HA和负载均衡。一个功能比较完整的常用的keepalived配置文件，主要包含三块：全局定义块，VRRP实例定义块和虚拟服务器定义块。全局定义块是必须的，如果keepalived只用来做ha，虚拟服务器是可选的。下面是一个功能比较完整的配置文件模板：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#全局定义块 global_defs &#123; # 邮件通知配置 notification_email &#123; email1 email2 &#125; notification_email_from email smtp_server host smtp_connect_timeout num #vrrp_strict #记得注释掉此行 lvs_id string router_id string ## 标识本节点的字条串,通常为hostname &#125; #VRRP 实例定义块 vrrp_sync_group string &#123; group &#123; string string &#125; &#125; vrrp_instance string &#123; state MASTER|BACKUP #只能存在一个MASTER, 其余的都是设置WieBACKUP virtual_router_id num #备机和主机需保持一致 interface string #绑定网卡名称 mcast_src_ip @IP #广播地址 priority num #保证master此值最大即可 advert_int num nopreempt smtp_alert lvs_sync_daemon_interface string authentication &#123; auth_type PASS|AH auth_pass string &#125; virtual_ipaddress &#123; # Block limited to 20 IP addresses @IP #虚拟ip @IP @IP &#125; &#125; #虚拟服务器定义块 virtual_server (@IP PORT)|(fwmark num) &#123; delay_loop num lb_algo rr|wrr|lc|wlc|sh|dh|lblc lb_kind NAT|DR|TUN persistence_timeout num protocol TCP|UDP real_server @IP PORT &#123; weight num notify_down /path/script.sh TCP_CHECK &#123; connect_port num connect_timeout num &#125; &#125; real_server @IP PORT &#123; weight num MISC_CHECK &#123; misc_path /path_to_script/script.sh(or misc_path “/path_to_script/script.sh &lt;arg_list&gt;”) &#125; &#125; real_server @IP PORT &#123; weight num HTTP_GET|SSL_GET &#123; url &#123; # You can add multiple url block path alphanum digest alphanum &#125; connect_port num connect_timeout num nb_get_retry num delay_before_retry num &#125; &#125; &#125; 3.1 全局定义块1、email通知（notification_email、smtp_server、smtp_connect_timeout）：用于服务有故障时发送邮件报警，可选项，不建议用。需要系统开启sendmail服务，建议用第三独立监控服务，如用nagios全面监控代替。 2、lvs_id：lvs负载均衡器标识，在一个网络内，它的值应该是唯一的。 3、router_id：用户标识本节点的名称，通常为hostname 4、花括号｛｝：用来分隔定义块，必须成对出现。如果写漏了，keepalived运行时不会得到预期的结果。由于定义块存在嵌套关系，因此很容易遗漏结尾处的花括号，这点需要特别注意 3.2 VRRP实例定义块（HA）1.vrrp_sync_group：同步vrrp级，用于确定失败切换（FailOver）包含的路由实例个数。即在有2个负载均衡器的场景，一旦某个负载均衡器失效，需要自动切换到另外一个负载均衡器的实例是哪 2.group：至少要包含一个vrrp实例，vrrp实例名称必须和vrrp_instance定义的一致 state：实例状态，只有MASTER 和 BACKUP两种状态，并且需要全部大写。抢占模式下，其中MASTER为工作状态，BACKUP为备用状态。当MASTER所在的服务器失效时，BACKUP所在的服务会自动把它的状态由BACKUP切换到MASTER状态。当失效的MASTER所在的服务恢复时，BACKUP从MASTER恢复到BACKUP状态. interface：对外提供服务的网卡接口，即VIP绑定的网卡接口。如：eth0，eth1。当前主流的服务器都有2个或2个以上的接口（分别对应外网和内网），在选择网卡接口时，一定要核实清楚。 mcast_src_ip: 本机广播IP地址 virtual_router_id：虚拟路由的ID号，每个节点设置必须一样，可选择IP最后一段使用，相同的 VRID 为一个组，他将决定多播的 MAC 地址。 priority: 节点优先级，取值范围0～254，MASTER要比BACKUP高 advert_int: MASTER与BACKUP节点间同步检查的时间间隔，单位为秒 lvs_sync_daemon_inteface: 负载均衡器之间的监控接口,类似于 HA HeartBeat 的心跳线。但它的机制优于 Heartbeat，因为它没有“裂脑”这个问题,它是以优先级这个机制来规避这个麻烦的。在 DR 模式中，lvs_sync_daemon_inteface与服务接口interface使用同一个网络接口. authentication: 验证类型和验证密码。类型主要有 PASS、AH 两种，通常使用PASS类型，据说AH使用时有问题。验证密码为明文，同一vrrp 实例MASTER与BACKUP使用相同的密码才能正常通信。 smtp_alert: 有故障时是否激活邮件通知 virtual_ipaddress: 虚拟IP地址池，可以有多个IP，每个IP占一行，不需要指定子网掩码。注意：这个IP必须与我们的设定的vip保持一致。配置之后我们只需要对外提供改地址即可，保证主机宕机后可以无感知的由从机提供服务。 3.3 虚拟服务器virtual_server定义块此模块主要用于负载均衡，这里不做过多介绍，因为一般都由nginx去做负载均衡了. virtual_server：定义一个虚拟服务器，这个ip是virtual_ipaddress中定义的其中一个，后面一个空格，然后加上虚拟服务的端口号。 delay_loop：健康检查时间间隔，单位：秒 lb_algo：负载均衡调度算法，互联网应用常用方式为wlc或rr lb_kind：负载均衡转发规则。包括DR、NAT、TUN 3种，一般使用路由（DR）转发规则。 persistence_timeout：http服务会话保持时间，单位：秒 protocol：转发协议，分为TCP和UDP两种 real_server：真实服务器IP和端口，可以定义多个 weight：负载权重，值越大，转发的优先级越高 notify_down：服务停止后执行的脚本 TCP_CHECK：服务有效性检测 1234* connect_port：服务连接端口* connect_timeout：服务连接超时时长，单位：秒* nb_get_retry：服务连接失败重试次数* delay_before_retry：重试连接间隔，单位：秒 4. 实战Keepalived+Nginx高可用接下来我们就上手搭建一套简单的高可用负载均衡服务 4.1 部署结构介绍先看看我们的部署结构：简单起见，我们采用4台虚拟机部署这套服务，省却web服务集群和数据库先关的部署，各个服务器服务部署情况如下： 服务器 说明 服务部署 172.16.22.135 作为主机实现后台Web服务的负载均衡 keepalive1, nginx1 172.16.22.136 作为备机实现后台Web服务的负载均衡 keepalive2, nginx2 172.16.22.137 Web服务集群(数据库单点，Session共享在Redis中) WebApplication01, WebApplication02 172.16.22.138 提供数据支撑服务(单点) Mysql, Redis 4.2 Nginx配置这套架构中，nginx主要提供一下三个服务能力: 静态Web服务器：提供静态资源的访问支持 反向代理：反向代理后台Web服务器，实现动态数据请求的转发 负载均衡：为后台Web集群提供负载均衡 nginx配置 2台机器配置相同内容 1234567891011121314151617181920212223242526272829303132333435363738394041424344# wwwroot.conf, 需要在nginx的主配置文件nginx.config中通过include引入# 负载均衡配置，配置web服务的地址upstream backend &#123; server 172.16.22.137:9001 weight=5; server 172.16.22.137:9002 weight=5;&#125;server &#123; listen 8080; server_name localhost; # 静态资源目录 set $root_path &quot;/home/zll/wwwroot&quot;; charset utf-8; access_log /home/zll/wwwlogs/host.access.log main; error_log /home/zll/wwwlogs/error.log; error_page 404 /404.html; # 静态资源服务配置 location / &#123; root $root_path; index index.html index.htm; &#125; # 配置后台转发规则，路径为service/*的将转发至web服务 location ~ ^/service/ &#123; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Cookie $http_cookie; proxy_cookie_path /service/ /; proxy_buffering off; proxy_connect_timeout 300s; proxy_send_timeout 300s; proxy_read_timeout 300s; # 反向代理 proxy_pass http://backend; &#125;&#125; 4.3 Keepalived配置 主机配置 12345678910111213141516171819202122232425262728293031[root@localhost sbin]# vi /etc/keepalived/keepalived.conf ! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id LVS_DEVEL vrrp_skip_check_adv_addr# vrrp_strict 注释掉这里 vrrp_garp_interval 0 vrrp_gna_interval 0&#125;vrrp_instance WWW-ROOT &#123; state MASTER interface eth1 virtual_router_id 51 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 172.16.22.140 #虚拟IP, 此地址为提供对外的地址，不真实存在 &#125;&#125; 从机配置12345678910111213141516171819202122232425262728293031[root@localhost sbin]# vi /etc/keepalived/keepalived.conf ! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id LVS_DEVEL vrrp_skip_check_adv_addr# vrrp_strict 注释掉这里 vrrp_garp_interval 0 vrrp_gna_interval 0&#125;vrrp_instance WWW-ROOT &#123; state BACKUP #从机配置设置为BACKUP interface eth1 virtual_router_id 51 priority 90 #配置权重小于主机 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 172.16.22.140 &#125;&#125; 从机配置只改变了添加注释的地方，其余与主机配置保持一致即可。 4.4 启动服务 启动web服务12345678910111213# cd /home/zll/web/9001/# sh start.sh start# cd /home/zll/web/9002/# sh start.sh start# jps -lv12977 com.github.cnkeep.WebApplication -XX:MaxPermSize=192M -Xms512M -Xmx512M -XX:+HeapDumpOnOutOfMemoryError12868 com.github.cnkeep.WebApplication -XX:MaxPermSize=192M -Xms512M -Xmx512M -XX:+HeapDumpOnOutOfMemoryError``` &gt; 启动nginx服务 ```text# nginx 启动keepalived服务1# systemctl start keepalived 访问验证 浏览器访问http://172.16.22.140/ 4.5 主备自动切换测试 Nginx主机正常服务时 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#查看主机网卡绑定，eth1网卡绑定这虚拟ip [root@localhost conf]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:e3:fa:94 brd ff:ff:ff:ff:ff:ff inet 192.168.222.132/24 brd 192.168.222.255 scope global dynamic eth0 valid_lft 1163sec preferred_lft 1163sec inet6 fe80::20c:29ff:fee3:fa94/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:e3:fa:9e brd ff:ff:ff:ff:ff:ff inet 172.16.22.135/24 brd 172.16.22.255 scope global dynamic eth1 valid_lft 2105911sec preferred_lft 2105911sec inet 172.16.22.140/32 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fee3:fa9e/64 scope link valid_lft forever preferred_lft forever# 查看主机keepalive日志[root@localhost ~]# tail -f -n 100 /var/log/messages Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: (VI_1) Receive advertisement timeout Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: (VI_1) Entering MASTER STATE Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: (VI_1) setting VIPs. Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: Sending gratuitous ARP on eth1 for 172.16.22.140 Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: (VI_1) Sending/queueing gratuitous ARPs on eth1 for 172.16.22.140 Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: Sending gratuitous ARP on eth1 for 172.16.22.140 Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: Sending gratuitous ARP on eth1 for 172.16.22.140 Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: Sending gratuitous ARP on eth1 for 172.16.22.140 Mar 10 01:42:00 localhost Keepalived_vrrp[13487]: Sending gratuitous ARP on eth1 for 172.16.22.140 # 查看备机网卡绑定[root@localhost sbin]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:49:97:b2 brd ff:ff:ff:ff:ff:ff inet 192.168.222.129/24 brd 192.168.222.255 scope global dynamic eth0 valid_lft 1246sec preferred_lft 1246sec inet6 fe80::20c:29ff:fe49:97b2/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:49:97:bc brd ff:ff:ff:ff:ff:ff inet 172.16.22.136/24 brd 172.16.22.255 scope global dynamic eth1 valid_lft 2466625sec preferred_lft 2466625sec inet6 fe80::20c:29ff:fe49:97bc/64 scope link valid_lft forever preferred_lft forever # 查看备机keepalive日志[root@localhost ~]# tail -f -n 100 /var/log/messages Mar 10 01:42:00 localhost Keepalived_vrrp[24728]: (VI_1) Entering BACKUP STATEMar 10 01:42:00 localhost Keepalived_vrrp[24728]: (VI_1) removing VIPs.Mar 10 01:43:44 localhost dhclient[683]: DHCPREQUEST on eth0 to 192.168.222.254 port 67 (xid=0x4b95ebe1)Mar 10 01:43:45 localhost dhclient[683]: DHCPACK from 192.168.222.254 (xid=0x4b95ebe1)Mar 10 01:43:45 localhost NetworkManager[645]: &lt;info&gt; [1552153425.0060] dhcp4 (eth0): address 192.168.222.132Mar 10 01:43:45 localhost NetworkManager[645]: &lt;info&gt; [1552153425.0063] dhcp4 (eth0): plen 24 (255.255.255.0)Mar 10 01:43:45 localhost NetworkManager[645]: &lt;info&gt; [1552153425.0063] dhcp4 (eth0): gateway 192.168.222.2 Nginx主机宕机时(通过kill keepalived进程)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#查看主机网卡绑定，eth1网卡绑定这虚拟ip [root@localhost conf]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:e3:fa:94 brd ff:ff:ff:ff:ff:ff inet 192.168.222.132/24 brd 192.168.222.255 scope global dynamic eth0 valid_lft 1163sec preferred_lft 1163sec inet6 fe80::20c:29ff:fee3:fa94/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:e3:fa:9e brd ff:ff:ff:ff:ff:ff inet 172.16.22.135/24 brd 172.16.22.255 scope global dynamic eth1 valid_lft 2105911sec preferred_lft 2105911sec inet6 fe80::20c:29ff:fee3:fa9e/64 scope link valid_lft forever preferred_lft forever# 查看备机网卡绑定[root@localhost sbin]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:49:97:b2 brd ff:ff:ff:ff:ff:ff inet 192.168.222.129/24 brd 192.168.222.255 scope global dynamic eth0 valid_lft 1246sec preferred_lft 1246sec inet6 fe80::20c:29ff:fe49:97b2/64 scope link valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:0c:29:49:97:bc brd ff:ff:ff:ff:ff:ff inet 172.16.22.136/24 brd 172.16.22.255 scope global dynamic eth1 valid_lft 2466625sec preferred_lft 2466625sec inet 172.16.22.140/32 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe49:97bc/64 scope link valid_lft forever preferred_lft forever # 查看备机keepalive日志Mar 10 01:50:03 localhost Keepalived_vrrp[24728]: (VI_1) Backup received priority 0 advertisementMar 10 01:50:03 localhost Keepalived_vrrp[24728]: (VI_1) Receive advertisement timeoutMar 10 01:50:03 localhost Keepalived_vrrp[24728]: (VI_1) Entering MASTER STATEMar 10 01:50:03 localhost Keepalived_vrrp[24728]: (VI_1) setting VIPs.Mar 10 01:50:03 localhost Keepalived_vrrp[24728]: Sending gratuitous ARP on eth1 for 172.16.22.140Mar 10 01:50:03 localhost Keepalived_vrrp[24728]: (VI_1) Sending/queueing gratuitous ARPs on eth1 for 172.16.22.140 可以看到当主机宕机时，keepalived自动做了切换，将虚拟ip绑定到了备机上，而我们通过虚拟ip(172.16.22.140)访问服务未收到影响，实现了高可用的效果。 4.6 遗留问题在上面的测试过程中，我们是通过kill掉主机的keepalived进程来激活主备切换的，但是存在主Nginx进程挂掉，而keepalived存在的情况，这时就无法实现自动的主备切换了，所以我们要提供检测脚本，检测当nginx服务停止时，kill掉keepalived进程，从而激活主备切换。 编写检测脚本 在主nginx上需要编写nginx进程检测脚本（check_nginx.sh），判断nginx进程是否存在，如果nginx不存在尝试重启nginx，若无法启动，就将keepalived进程杀掉，check_nginx.sh内容如下：12345678910111213141516171819202122232425# yum install psmisc #安装killall支持# vi /etc/keepalived/check_nginx.sh #!/bin/sh ################################################################################# #=== 如果进程中没有nginx，尝试重启nginx进程，若还是没有，则将keepalived进程kill掉 ===# ################################################################################# ## 查看是否有nginx进程 把值赋给变量A A=`ps -C nginx --no-header |wc -l` ## 重启nginx进程 if [ $A -eq 0 ];then /usr/local/nginx/sbin/nginx ## 等待时间 sleep 2 ## 还是没有nginx进程 if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then ## 杀掉keepalived killall keepalived exit 1 else exit 0 fi else exit 0 fi 修改keepalived.conf配置 1234567891011121314151617181920212223242526272829303132333435363738394041[root@localhost sbin]# vi /etc/keepalived/keepalived.conf ! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id LVS_DEVEL vrrp_skip_check_adv_addr# vrrp_strict 注释掉这里 vrrp_garp_interval 0 vrrp_gna_interval 0&#125;# 定时监控配置vrrp_script check_nginx &#123; script &quot;/etc/keepalived/check_nginx.sh&quot; ##监控脚本 interval 2 ##时间间隔，2秒 weight -20 ##权重&#125; vrrp_instance WWW-ROOT &#123; state BACKUP #从机配置设置为BACKUP interface eth1 virtual_router_id 51 priority 90 #配置权重小于主机 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 172.16.22.140 &#125; track_script &#123; check_nginx #监控脚本 &#125;&#125; 重启keepalived即可","tags":[{"name":"Keepalived","slug":"Keepalived","permalink":"https://cnkeep.github.io/tags/Keepalived/"},{"name":"HA","slug":"HA","permalink":"https://cnkeep.github.io/tags/HA/"}]}]